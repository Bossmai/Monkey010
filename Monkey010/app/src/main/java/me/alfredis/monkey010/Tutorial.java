package me.alfredis.monkey010;

import static de.robv.android.xposed.XposedHelpers.findAndHookMethod;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;


import android.app.ActivityManager;
import android.app.Application;
import android.content.ContentResolver;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Color;
import android.location.Location;
import android.location.LocationManager;
import android.net.wifi.WifiInfo;
import android.os.Build;
import android.os.Environment;
import android.provider.Settings;
import android.telephony.CellLocation;
import android.telephony.NeighboringCellInfo;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import android.widget.TextView;
import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;

import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;

import static de.robv.android.xposed.XposedHelpers.findClass;

import android.os.Process;


public class Tutorial implements IXposedHookLoadPackage {
	private HashMap<String, String> configMap = new HashMap<String, String>();

    public static int cellIndex = 0;

    private static final String configJson = "{\"connect_mode\":\"0\",\"density\":\"2.0\",\"densityDpi\":\"320\",\"get\":\"I9250XXLJ1\",\"getBSSID\":\"15:f8:96:bc:92:70\",\"getDeviceId\":\"990002043896289\",\"getJiZhan\":\"9,11031,3189\",\"getLine1Number\":\"15435925392\",\"getMacAddress\":\"84:7a:88:ac:4a:da\",\"getMetrics\":\"720x1184\",\"getNetworkCountryIso\":\"cn\",\"getNetworkOperator\":\"46002\",\"getNetworkOperatorName\":\"中国移动\",\"getNetworkType\":\"1\",\"getPhoneType\":\"02\",\"getRadioVersion\":\"I9250XXLJ1\",\"getSSID\":\"home\",\"getSimCountryIso\":\"cn\",\"getSimOperator\":\"46002\",\"getSimOperatorName\":\"中国移动\",\"getSimSerialNumber\":\"89867785196673925881\",\"getSimState\":\"0\",\"getString\":\"c6fdfa76d49732ce\",\"getSubscriberId\":\"460029291155269\",\"gps\":null,\"location_mode\":\"0\",\"scaledDensity\":\"2.0\",\"setCpuName\":\"Tuna\",\"sign\":\"718E95ABAA307C583CFC5A9EAA5FB73E\",\"xdpi\":\"315.31033\",\"ydpi\":\"318.7451\",\"ARCH\":\"armeabi-v7a_armeabi\",\"BRAND\":\"oneplus\",\"DEVICE\":\"HTC ONE M8\",\"FINGERPRINT\":\"oneplus/bacon/A0001:5.0.2/LRX22G/YNG1TAS0YL:user/release-keys\",\"HARDWARE\":\"Qualcomm MSM8974PRO-AC\",\"MANUFACTURER\":\"OnePlus\",\"MODEL\":\"A0001\",\"PRODUCT\":\"A0001\",\"RELEASE\":\"4.3\",\"SDK\":\"18\",\"latitude\":\"0\",\"longitude\":\"0\"}";

    private static final String drivers_content = "/dev/tty             /dev/tty        5       0 system:/dev/tty\n" +
            "/dev/console         /dev/console    5       1 system:console\n" +
            "/dev/ptmx            /dev/ptmx       5       2 system\n" +
            "rfcomm               /dev/rfcomm   216 0-255 serial\n" +
            "g_serial             /dev/ttyGS    249 0-3 serial\n" +
            "usbserial            /dev/ttyUSB   188 0-253 serial\n" +
            "acm                  /dev/ttyACM   166 0-31 serial\n" +
            "OMAP-SERIAL          /dev/ttyO     251 0-3 serial\n" +
            "pty_slave            /dev/pts      136 0-1048575 pty:slave\n" +
            "pty_master           /dev/ptm      128 0-1048575 pty:master\n" +
            "fiq-debugger         /dev/ttyFIQ   253       0 serial";

    private static final String scaling_cur_freq_content = "1200000";
    private static final String cpuinfo_max_freq_content = "1200000";
    private static final String cpuinfo_min_freq_content = "350000";
    private static final String build_prop_content = "# begin build properties\n" +
            "# autogenerated by buildinfo.sh\n" +
            "ro.build.id=JWR66Y\n" +
            "ro.build.display.id=JWR66Y\n" +
            "ro.build.version.incremental=776638\n" +
            "ro.build.version.sdk=18\n" +
            "ro.build.version.codename=REL\n" +
            "ro.build.version.release=4.3\n" +
            "ro.build.date=Tue Aug 13 22:53:54 UTC 2013\n" +
            "ro.build.date.utc=1376434434\n" +
            "ro.build.type=user\n" +
            "ro.build.user=android-build\n" +
            "ro.build.host=wpef5.hot.corp.google.com\n" +
            "ro.build.tags=release-keys\n" +
            "ro.product.model=Galaxy Nexus\n" +
            "ro.product.brand=google\n" +
            "ro.product.name=takju\n" +
            "ro.product.device=maguro\n" +
            "ro.product.board=tuna\n" +
            "ro.product.cpu.abi=armeabi-v7a\n" +
            "ro.product.cpu.abi2=armeabi\n" +
            "ro.product.manufacturer=samsung\n" +
            "ro.product.locale.language=en\n" +
            "ro.product.locale.region=US\n" +
            "ro.wifi.channels=\n" +
            "ro.board.platform=omap4\n" +
            "# ro.build.product is obsolete; use ro.product.device\n" +
            "ro.build.product=maguro\n" +
            "# Do not try to parse ro.build.description or .fingerprint\n" +
            "ro.build.description=takju-user 4.3 JWR66Y 776638 release-keys\n" +
            "ro.build.fingerprint=google/takju/maguro:4.3/JWR66Y/776638:user/release-keys\n" +
            "ro.build.characteristics=nosdcard\n" +
            "# end build properties\n" +
            "#\n" +
            "# system.prop for maguro\n" +
            "#\n" +
            "\n" +
            "rild.libpath=/vendor/lib/libsec-ril.so\n" +
            "rild.libargs=-d /dev/ttys0\n" +
            "telephony.lteOnCdmaDevice=0\n" +
            "\n" +
            "# Ril sends only one RIL_UNSOL_CALL_RING, so set call_ring.multiple to false\n" +
            "ro.telephony.call_ring.multiple=0\n" +
            "\n" +
            "# GPU producer to CPU consumer not supported\n" +
            "ro.bq.gpu_to_cpu_unsupported=1\n" +
            "\n" +
            "#\n" +
            "# ADDITIONAL_BUILD_PROPERTIES\n" +
            "#\n" +
            "wifi.interface=wlan0\n" +
            "media.aac_51_output_enabled=true\n" +
            "ro.opengles.version=131072\n" +
            "ro.sf.lcd_density=320\n" +
            "ro.hwui.disable_scissor_opt=true\n" +
            "dalvik.vm.heapstartsize=8m\n" +
            "dalvik.vm.heapgrowthlimit=96m\n" +
            "dalvik.vm.heapsize=256m\n" +
            "dalvik.vm.heaptargetutilization=0.75\n" +
            "dalvik.vm.heapminfree=512k\n" +
            "dalvik.vm.heapmaxfree=8m\n" +
            "ro.config.ringtone=Themos.ogg\n" +
            "ro.config.notification_sound=Proxima.ogg\n" +
            "ro.config.alarm_alert=Cesium.ogg\n" +
            "ro.com.android.dateformat=MM-dd-yyyy\n" +
            "ro.com.android.dataroaming=false\n" +
            "ro.url.legal=http://www.google.com/intl/%s/mobile/android/basic/phone-legal.html\n" +
            "ro.url.legal.android_privacy=http://www.google.com/intl/%s/mobile/android/basic/privacy.html\n" +
            "ro.com.google.clientidbase=android-google\n" +
            "ro.carrier=unknown\n" +
            "ro.com.android.wifi-watchlist=GoogleGuest\n" +
            "ro.error.receiver.system.apps=com.google.android.feedback\n" +
            "ro.setupwizard.enterprise_mode=1\n" +
            "keyguard.no_require_sim=true\n" +
            "drm.service.enabled=true\n" +
            "ro.facelock.black_timeout=1250\n" +
            "ro.facelock.det_timeout=1500\n" +
            "ro.facelock.rec_timeout=2500\n" +
            "ro.facelock.lively_timeout=2500\n" +
            "ro.facelock.est_max_time=800\n" +
            "ro.facelock.use_intro_anim=true\n" +
            "camera.flash_off=0\n" +
            "ro.com.google.mcc_fallback=262\n" +
            "dalvik.vm.dexopt-flags=m=y\n" +
            "net.bt.name=Android\n" +
            "dalvik.vm.stack-trace-file=/data/anr/traces.txt\n";

    private static final String version_content = "Linux version 3.0.72-gfb3c9ac (android-build@vpbs1.mtv.corp.google.com) (gcc version 4.7 (GCC) ) #1 SMP PREEMPT Fri Jun 7 12:00:19 PDT 2013";
	private static final String cpuinfo_content = "Processor\t: ARMv7 Processor rev 10 (v7l)\n" +
            "processor\t: 0\n" +
            "BogoMIPS\t: 2047.70\n" +
            "\n" +
            "processor\t: 1\n" +
            "BogoMIPS\t: 2047.70\n" +
            "\n" +
            "Features\t: swp half thumb fastmult vfp edsp thumbee neon vfpv3 \n" +
            "CPU implementer\t: 0x41\n" +
            "CPU architecture: 7\n" +
            "CPU variant\t: 0x2\n" +
            "CPU part\t: 0xc09\n" +
            "CPU revision\t: 10\n" +
            "\n" +
            "Hardware\t: Tuna\n" +
            "Revision\t: 0009\n" +
            "Serial\t\t: 0149cbf30b003011";
    private static final String wifi_mac_content = "20:64:32:54:ab:a1";

	public Tutorial() {


        initializeConfiguration("monkey010.conf", configJson);
        initializeConfiguration("drivers", drivers_content);
        initializeConfiguration("scaling_cur_freq", scaling_cur_freq_content);
        initializeConfiguration("cpuinfo_max_freq", cpuinfo_max_freq_content);
        initializeConfiguration("cpuinfo_min_freq", cpuinfo_min_freq_content);
        initializeConfiguration("build.prop", build_prop_content);
        initializeConfiguration("version", version_content);
        initializeConfiguration("cpuinfo", cpuinfo_content);
        initializeConfiguration("address", wifi_mac_content);

		try {
			FileReader fr = new FileReader("/data/data/me.alfredis.monkey010/monkey010.conf");
			BufferedReader br = new BufferedReader(fr);
			while (br.ready()) {
				String line = br.readLine();
                if (line == null) {
                    break;
                }
                
                line = line.substring(1, line.length() - 1);
                String[] lineArray = line.split(",");
                for (String str : lineArray) {

                	String[] tempKVP = str.split(":"); 
                	
                	String tempKey = tempKVP[0].substring(1, tempKVP[0].length() - 1);
                	String tempValue = "";
                	
                	int count = 0;
                	for (int i = 0; i < str.length(); i++) {
                		if (str.charAt(i) == ':') {
                			count++;
                		}                		
                	}
                	
                	if (tempKVP[1].startsWith("\"")) {
                		if (count > 1) { 
                    		tempValue = str.substring(str.indexOf(':') + 2, str.length() - 1);
                		} else {
                    		tempValue = tempKVP[1].substring(1, tempKVP[1].length() - 1);
                		}
                	} else {
                		tempValue = tempKVP[1];
                	}


                    //XposedBridge.log(tempKey + " " + tempValue);
                    configMap.put(tempKey, tempValue);
                }
			}
			
			fr.close();
			br.close();

        } catch (FileNotFoundException e) {
			XposedBridge.log(e.getMessage());
		} catch (IOException e) {
			XposedBridge.log(e.getMessage());
		} 
	}
	
	public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
        //XposedBridge.log("Loaded app: " + lpparam.packageName);


        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getDeviceId", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getDeviceId"));
            }
        });

        findAndHookMethod(WifiInfo.class.getName(), lpparam.classLoader, "getBSSID", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getBSSID"));
            }
        });

        findAndHookMethod(WifiInfo.class.getName(), lpparam.classLoader, "getMacAddress", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getMacAddress"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getNetworkCountryIso", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getNetworkCountryIso"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getNetworkOperator", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSimOperator"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getNetworkOperatorName", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getNetworkOperatorName"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getLine1Number", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getLine1Number"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSubscriberId", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSubscriberId"));
            }
        });

        findAndHookMethod(WifiInfo.class.getName(), lpparam.classLoader, "getSSID", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSSID"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSimCountryIso", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSimCountryIso"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSimOperator", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSimOperator"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSimOperatorName", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSimOperatorName"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSimSerialNumber", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSimSerialNumber"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSubscriberId", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getSubscriberId"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getNetworkOperator", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getNetworkOperator"));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getNeighboringCellInfo", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                List<NeighboringCellInfo> neighboringInfos = new ArrayList<NeighboringCellInfo>();
                NeighboringCellInfo nc1 = new NeighboringCellInfo();
                NeighboringCellInfo nc2 = new NeighboringCellInfo();
                NeighboringCellInfo nc3 = new NeighboringCellInfo();
                neighboringInfos.add(nc1);
                neighboringInfos.add(nc2);
                neighboringInfos.add(nc3);
                param.setResult(neighboringInfos);
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getCellLocation", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(new GsmCellLocation() {
                });
            }
        });

        findAndHookMethod(NeighboringCellInfo.class.getName(), lpparam.classLoader, "getLac", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);

                param.setResult(Integer.parseInt(configMap.get("getJiZhan").split(",")[1]));
            }
        });

        findAndHookMethod(NeighboringCellInfo.class.getName(), lpparam.classLoader, "getCid", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(Integer.parseInt(configMap.get("getJiZhan").split(",")[2]));
            }
        });

        findAndHookMethod(NeighboringCellInfo.class.getName(), lpparam.classLoader, "getRssi", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(Integer.parseInt(configMap.get("getJiZhan").split(",")[0]));
            }
        });


        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "BRAND", configMap.get("BRAND"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "DEVICE", configMap.get("DEVICE"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "FINGERPRINT", configMap.get("FINGERPRINT"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "HARDWARE", configMap.get("HARDWARE"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "MANUFACTURER", configMap.get("MANUFACTURER"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "MODEL", configMap.get("MODEL"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "PRODUCT", configMap.get("PRODUCT"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.VERSION.class, "RELEASE", configMap.get("RELEASE"));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.VERSION.class, "SDK", configMap.get("SDK"));

        String archTempString = configMap.get("ARCH");
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "CPU_ABI", archTempString.substring(0, archTempString.indexOf("_")));
        de.robv.android.xposed.XposedHelpers.setStaticObjectField(Build.class, "CPU_ABI2", archTempString.substring(archTempString.indexOf("_") + 1, archTempString.length()));

        //XposedHelpers.setFloatField(XposedHelpers.findClass("DisplayMetrics", lpparam.classLoader), "density", Float.valueOf(configMap.get("density")));


        findAndHookMethod(Display.class.getName(), lpparam.classLoader, "getMetrics", DisplayMetrics.class.getName(), new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                DisplayMetrics metrics = (DisplayMetrics) param.args[0];
                metrics.density = Float.valueOf(configMap.get("density"));
                metrics.densityDpi = Integer.valueOf(configMap.get("densityDpi"));
                metrics.scaledDensity = Float.valueOf(configMap.get("scaledDensity"));
                metrics.heightPixels = Integer.valueOf(configMap.get("getMetrics").substring(0, configMap.get("getMetrics").indexOf("x")));
                metrics.widthPixels = Integer.valueOf(configMap.get("getMetrics").substring(configMap.get("getMetrics").indexOf("x") + 1));
                metrics.xdpi = Float.valueOf(configMap.get("xdpi"));
                metrics.ydpi = Float.valueOf(configMap.get("ydpi"));
                param.setResult(metrics);
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getSimState", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(Integer.valueOf(configMap.get("getSimState")));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getNetworkType", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(Integer.valueOf(configMap.get("getNetworkType")));
            }
        });

        findAndHookMethod(TelephonyManager.class.getName(), lpparam.classLoader, "getPhoneType", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(Integer.valueOf(configMap.get("getPhoneType")));
            }
        });

        findAndHookMethod(Build.class.getName(), lpparam.classLoader, "getRadioVersion", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(configMap.get("getRadioVersion"));
            }
        });

        findAndHookMethod(Settings.Secure.class.getName(), lpparam.classLoader, "getString", ContentResolver.class.getName(), String.class.getName(), new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                if (((String) param.args[1]).endsWith("android_id")) {
                    param.setResult(configMap.get("getString"));
                }
            }
        });

        Class systemPropertiesClass = null;
        Object systemProperties = null;
        Method systemPropertiesGetMethod = null;
        try {
            systemPropertiesClass = Class.forName("android.os.SystemProperties");
            systemProperties = systemPropertiesClass.newInstance();
            Class[] argClasses = new Class[2];
            argClasses[0] = String.class;
            argClasses[1] = String.class;
            systemPropertiesGetMethod = systemPropertiesClass.getMethod("get", argClasses);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }

        findAndHookMethod(systemPropertiesClass.getName(), lpparam.classLoader, systemPropertiesGetMethod.getName(), String.class.getName(), String.class.getName(), new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                if (((String) param.args[0]).endsWith("gsm.version.baseband") && ((String) param.args[1]).endsWith("no message")) {
                    param.setResult(configMap.get("get"));
                } else if (((String) param.args[0]).startsWith("ro.genymotion") || ((String) param.args[0]).startsWith("ro.genyd")) {
                    param.setResult(null);
                } else if (((String) param.args[0]).startsWith("androVM")) {
                    param.setResult(null);
                } else if (((String) param.args[0]).equals("ro.hardware") || ((String) param.args[0]).equals("ro.boot.hardware")) {
                    param.setResult(configMap.get("HARDWARE"));

                }
            }
        });

        findAndHookMethod(ActivityManager.class.getName(), lpparam.classLoader, "isUserAMonkey", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                param.setResult(false);
            }
        });

        findAndHookMethod(File.class.getName(), lpparam.classLoader, "exists", new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                File file = (File) param.thisObject;
                String filePath = file.getAbsolutePath();
                if (filePath.equals("/dev/socket/qemud") || filePath.equals("/dev/qemu_pipe") || filePath.equals("/system/lib/libc_malloc_debug_qemu.so")
                        || filePath.equals("/sys/qemu_trace") || filePath.equals("/system/bin/qemu-props") || filePath.equals("/system/bin/qemu-props")
                        || filePath.equals("/dev/socket/baseband_genyd") || filePath.equals("/dev/socket/genyd") || filePath.equals("/proc/cmdline")) {
                    param.setResult(false);
                }
            }
        });


        findAndHookMethod(LocationManager.class.getName(), lpparam.classLoader, "getLastKnownLocation", String.class.getName(), new XC_MethodHook() {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                super.afterHookedMethod(param);
                Location location = new Location("");
                if (((String) param.args[0]).equals("gps")) {
                    Random r = new Random();
                    location.setLatitude(Double.parseDouble(configMap.get("latitude")));
                    location.setLongitude(Double.parseDouble(configMap.get("longitude")));
                }
                param.setResult(location);
            }
        });

        hookAll(IoBridgeHook.getMethodHookList());

        //hookAll(ProcessHook.getMethodHookList());
    }

    private static void hookAll(List<MethodHook> methodHookList) {
        for (MethodHook methodHook : methodHookList)
            hook(methodHook);
    }

    private static void hook(MethodHook methodHook) {
        hook(methodHook, null);
    }

    private static void hook(final MethodHook methodHook, ClassLoader classLoader) {
        try {

            // Create hook method
            XC_MethodHook xcMethodHook = new XC_MethodHook() {
                @Override
                protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                    try {
                        if (Process.myUid() <= 0)
                            return;
                        methodHook.before(param);
                    } catch (Throwable ex) {
                        throw ex;
                    }
                }

                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    if (!param.hasThrowable())
                        try {
                            if (Process.myUid() <= 0)
                                return;
                            methodHook.after(param);
                        } catch (Throwable ex) {
                            throw ex;
                        }
                }
            };

            // Find hook class
            Class<?> hookClass = findClass(methodHook.getClassName(), classLoader);
            if (hookClass == null) {
                String message = String.format("Hook-Class not found: %s", methodHook.getClassName());
                Log.i("SandBoxAnti", message);
                return;
            }

            // Add hook
            if (methodHook.getMethodName() == null) {
                for (Constructor<?> constructor : hookClass.getDeclaredConstructors()){
                    XposedBridge.hookMethod(constructor, xcMethodHook);
                }
            } else{
                for (Method method : hookClass.getDeclaredMethods())
                    if (method.getName().equals(methodHook.getMethodName()))
                        XposedBridge.hookMethod(method, xcMethodHook);
            }

        } catch (Throwable ex) {

        }
    }


    private void initializeConfiguration(String fileName, String content) {
        File file = new File("/data/data/me.alfredis.monkey010/" + fileName);

        if (!file.exists()) {
            try {
                FileWriter fw = new FileWriter("/data/data/me.alfredis.monkey010/" + fileName);

                BufferedWriter bw = new BufferedWriter(fw);

                bw.write(content);

                bw.close();
                fw.close();
            } catch (IOException e) {

                e.printStackTrace();
            }

        }
    }
}
